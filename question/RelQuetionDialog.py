# -*- coding: utf-8 -*-
import requests
# Form implementation generated from reading ui file 'RelQuetionDialog.ui'
#
# Created by: PyQt5 UI code generator 5.15.8
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt, QStringListModel
from PyQt5.QtGui import QPixmap
from PyQt5.QtWidgets import QDialog, QListView

from myqt.StepListWidgetItem import StepListWidgetItem
from myreqeust.HttpTool import HttpTool
from myreqeust.PathConstant import PathConstant


class RelQuetionDialog(QDialog):
    def __init__(self,question_id):
        super().__init__()
        self.question_id=question_id
        self.relationQuestionId=-1
        self.setupUi()
        self.setWindowModality(Qt.ApplicationModal)
    def setupUi(self):
        # Dialog.setObjectName("Dialog")
        self.resize(703, 617)
        self.buttonBox = QtWidgets.QDialogButtonBox(self)
        self.buttonBox.setGeometry(QtCore.QRect(320, 550, 341, 32))
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.buttonBox.setObjectName("buttonBox")
        self.horizontalLayoutWidget_4 = QtWidgets.QWidget(self)
        self.horizontalLayoutWidget_4.setGeometry(QtCore.QRect(40, 40, 561, 80))
        self.horizontalLayoutWidget_4.setObjectName("horizontalLayoutWidget_4")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_4)
        self.horizontalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.label_2 = QtWidgets.QLabel(self.horizontalLayoutWidget_4)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_3.addWidget(self.label_2)
        self.type_comboBox = QtWidgets.QComboBox(self.horizontalLayoutWidget_4)
        self.type_comboBox.setObjectName("comboBox_2")
        self.type_comboBox.addItem("")
        self.type_comboBox.addItem("")
        self.type_comboBox.addItem("")
        self.type_comboBox.addItem("")
        
        self.horizontalLayout_3.addWidget(self.type_comboBox)
        self.horizontalLayout_2.addLayout(self.horizontalLayout_3)
        self.label_3 = QtWidgets.QLabel(self.horizontalLayoutWidget_4)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_2.addWidget(self.label_3)
        self.chapter_comboBox = QtWidgets.QComboBox(self.horizontalLayoutWidget_4)
        self.chapter_comboBox.setObjectName("comboBox")
        self.horizontalLayout_2.addWidget(self.chapter_comboBox)
        self.horizontalLayout.addLayout(self.horizontalLayout_2)
        self.title_label = QtWidgets.QLabel(self.horizontalLayoutWidget_4)
        self.title_label.setObjectName("title_label")
        self.horizontalLayout.addWidget(self.title_label)
        self.title_line_edit = QtWidgets.QLineEdit(self.horizontalLayoutWidget_4)
        self.title_line_edit.setObjectName("title_line_edit")
        self.horizontalLayout.addWidget(self.title_line_edit)
        self.search_button = QtWidgets.QPushButton(self.horizontalLayoutWidget_4)
        self.search_button.setObjectName("search_button")
        self.search_button.clicked.connect(self.search_question)
        self.horizontalLayout.addWidget(self.search_button)
        self.horizontalLayout_4.addLayout(self.horizontalLayout)
        self.qustion_listWidget = QtWidgets.QListWidget(self)
        self.qustion_listWidget.setGeometry(QtCore.QRect(20, 130, 111, 421))
        self.qustion_listWidget.setObjectName("qustion_listWidget")
        self.image_label = QtWidgets.QLabel(self)
        self.image_label.setGeometry(QtCore.QRect(150, 150, 471, 381))
        self.image_label.setObjectName("image_label")

        self.retranslateUi(self)
        self.buttonBox.accepted.connect(self.add_question) # type: ignore
        self.buttonBox.rejected.connect(self.reject) # type: ignore

        #combox绑定的函数
        self.type_comboBox.currentIndexChanged.connect(self.show_chapter_comboBox)
        self.show_chapter_comboBox(0)
        QtCore.QMetaObject.connectSlotsByName(self)

    def show_chapter_comboBox(self,index):
        chapters=HttpTool.get(PathConstant.GET_CHAPTER_SIMPLE_LIST)
        for chapter in chapters:
            self.chapter_comboBox.addItem(chapter["name"],str(chapter["id"]))
        # self.comboBox.currentIndexChanged.connect(self.handle_selection_change)
    # def handle_selection_change(self,index):
    #     chapter_id=self.comboBox.itemData(index)
    #     chapter_name=self.comboBox.currentText()
    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.label_2.setText(_translate("Dialog", "类型"))
        self.type_comboBox.setItemText(0, _translate("Dialog", "练习题"))
        self.type_comboBox.setItemText(1, _translate("Dialog", "真题"))
        self.type_comboBox.setItemText(2, _translate("Dialog", "模拟题"))
        self.type_comboBox.setItemText(3, _translate("Dialog", "本科"))
        self.label_3.setText(_translate("Dialog", "章"))
        self.title_label.setText(_translate("Dialog", "题目名称"))
        self.search_button.setText(_translate("Dialog", "搜索"))
        self.image_label.setText(_translate("Dialog", "TextLabel"))

    def search_question(self):
        data={}
        data["question_id"]=self.question_id
        data["name"]=self.title_line_edit.text()
        data["type"]=str(self.type_comboBox.currentIndex())
        data["chapter"]=self.chapter_comboBox.itemData(self.chapter_comboBox.currentIndex())
        self.questions=HttpTool.get(PathConstant.QUERY_QUESTION_LIST,data)
        # 创建一个字符串列表模型
        if self.questions:
            for question in self.questions:
                self.qustion_listWidget.addItem(StepListWidgetItem(question["name"], question["id"], question["imageSrc"]))
            self.qustion_listWidget.itemClicked.connect(self.image_display)


    def image_display(self, item):
        image_path = item.image_src  # 获取按钮的文本
        self.relationQuestionId=item.id
        response = requests.get(image_path)
        if response.status_code == 200:
            image_data = response.content
            pixmap = QPixmap()
            pixmap.loadFromData(image_data)
            self.image_label.setPixmap(pixmap)
       
    def add_question(self):
        if self.relationQuestionId!=-1:
            data={}
            data["questionId"]=self.question_id
            data["relationQuestionId"]=self.relationQuestionId
            HttpTool.post(PathConstant.ADD_REL_QUESTION,data)
        self.accept()
        