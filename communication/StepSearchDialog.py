# -*- coding: utf-8 -*-
import requests
# Form implementation generated from reading ui file 'StepSearchDialog.ui'
#
# Created by: PyQt5 UI code generator 5.15.8
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QStandardItemModel, QStandardItem, QPixmap
from PyQt5.QtWidgets import QDialog

from component.StepItem import StepItem
from myreqeust.HttpTool import HttpTool
from myreqeust.PathConstant import PathConstant


class StepSearchDialog(QDialog):
    def __init__(self,step_id,flag=1):
        super().__init__()
        self.step_id=step_id
        self.chapter=-1
        self.source_items=[]
        self.target_items=[]
        self.flag=flag
        self.setupUi()
        self.setWindowModality(Qt.ApplicationModal)
    def setupUi(self):
        self.setObjectName("Dialog")
        self.resize(1076, 864)
        self.buttonBox = QtWidgets.QDialogButtonBox(self)
        self.buttonBox.setGeometry(QtCore.QRect(700, 810, 341, 32))
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.buttonBox.setObjectName("buttonBox")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(80, 30, 791, 80))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label = QtWidgets.QLabel(self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        self.comboBox = QtWidgets.QComboBox(self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(20)
        self.comboBox.setFont(font)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.horizontalLayout.addWidget(self.comboBox)
        self.label_2 = QtWidgets.QLabel(self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout.addWidget(self.label_2)
        self.lineEdit = QtWidgets.QLineEdit(self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(20)
        self.lineEdit.setFont(font)
        self.lineEdit.setObjectName("lineEdit")
        self.horizontalLayout.addWidget(self.lineEdit)
        self.searchButton = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.searchButton.clicked.connect(self.stepSearch)
        font = QtGui.QFont()
        font.setPointSize(20)
        self.searchButton.setFont(font)
        self.searchButton.setObjectName("searchButton")
        self.horizontalLayout.addWidget(self.searchButton)
        self.leftListView = QtWidgets.QListView(self)
        self.leftListView.setGeometry(QtCore.QRect(20, 130, 431, 281))
        self.leftListView.setObjectName("leftListView")
        self.addButton = QtWidgets.QPushButton(self)
        self.addButton.setGeometry(QtCore.QRect(470, 230, 93, 28))
        self.addButton.setObjectName("addButton")
        self.removeButton = QtWidgets.QPushButton(self)
        self.removeButton.setGeometry(QtCore.QRect(580, 230, 93, 28))
        self.removeButton.setObjectName("removeButton")
        self.rightListView = QtWidgets.QListView(self)
        self.rightListView.setGeometry(QtCore.QRect(690, 130, 291, 271))
        self.rightListView.setObjectName("rightListView")
        self.image_label = QtWidgets.QLabel(self)
        self.image_label.setGeometry(QtCore.QRect(40, 450, 921, 321))
        self.image_label.setObjectName("image_label")

        self.retranslateUi(self)
        self.buttonBox.accepted.connect(self.add_relation_step) # type: ignore
        self.buttonBox.rejected.connect(self.reject) # type: ignore
        # 帮定事件
        self.source_model = QStandardItemModel()
        self.target_model = QStandardItemModel()

        self.leftListView.setModel(self.source_model)
        self.rightListView.setModel(self.target_model)

        self.addButton.clicked.connect(self.transferItem)
        self.removeButton.clicked.connect(self.transferItem)
        self.leftListView.clicked.connect(self.on_item_clicked)
        QtCore.QMetaObject.connectSlotsByName(self)

    # 点击item显示图片
    def on_item_clicked(self,index):
        sender = self.sender()
        if sender==self.leftListView:
            item = self.source_model.itemFromIndex(index)
            self.show_image(item)
        elif sender==self.rightListView:
            item = self.target_model.itemFromIndex(index)
            self.show_image(item)
        else:
            return

    # label显示图片
    def show_image(self,item):
        image_path = item.imageSrc
        response = requests.get(image_path)
        if response.status_code == 200:
            image_data = response.content
            pixmap = QPixmap()
            pixmap.loadFromData(image_data)
            self.image_label.setPixmap(pixmap)
            self.image_label.setScaledContents(True)


    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.label.setText(_translate("Dialog", "章节"))
        self.comboBox.setItemText(0, _translate("Dialog", ""))
        self.comboBox.setItemText(1, _translate("Dialog", "第一章"))
        self.comboBox.setItemText(2, _translate("Dialog", "第二章"))
        self.comboBox.setItemText(3, _translate("Dialog", "第三章"))
        self.comboBox.setItemText(4, _translate("Dialog", "第四章"))
        self.comboBox.setItemText(5, _translate("Dialog", "第五章"))
        self.comboBox.setItemText(6, _translate("Dialog", "第六章"))
        self.comboBox.setItemText(7, _translate("Dialog", "第七章"))
        self.comboBox.setItemText(8, _translate("Dialog", "第八章"))
        self.comboBox.setItemText(9, _translate("Dialog", "第九章"))
        self.comboBox.setItemText(10, _translate("Dialog", "第十章"))
        self.comboBox.setItemText(11, _translate("Dialog", "第十一章"))
        self.comboBox.setCurrentIndex(0)
        self.label_2.setText(_translate("Dialog", "名称"))
        self.searchButton.setText(_translate("Dialog", "搜索"))
        self.addButton.setText(_translate("Dialog", "增加"))
        self.removeButton.setText(_translate("Dialog", "减少"))
        self.image_label.setText(_translate("Dialog", "TextLabel"))

   # 搜索按钮触发事件，获取到的数据，更新到左视图
    def stepSearch(self):
        data={}
        data["name"] = self.lineEdit.text()
        data["chapterId"]=self.comboBox.currentIndex()
        res=HttpTool.post(PathConstant.QUERY_STEP, data)
        if res:
            self.updateDataView(res)

    def updateDataView(self,data):
        # 清空模型中的数据
        self.source_model.clear()

        # 添加新数据到模型
        for item in data:
            item1 = StepItem(item["id"],item["name"],item["imageSrc"],item["sectionId"])
            self.source_model.appendRow(item1)

        # 更新视图
        self.leftListView.setModel(self.source_model)
        self.leftListView.update()


    # 交换函数
    def transferItem(self):
        sender = self.sender()

        if sender == self.addButton:
            selected_indexes = self.leftListView.selectedIndexes()
            for index in selected_indexes:
                row = index.row()
                item = self.source_model.item(row)
                text = item.text()
                id = item.id
                self.source_model.removeRow(row)
                step_item = StepItem(id, text,item.imageSrc,item.sectionId)
                # step_item.setData(item.text(), Qt.DisplayRole)  # 设置text为显示角色的数据
                self.target_model.appendRow(step_item)
                new_data = {}
                new_data["id"] = id
                new_data["name"] = text
                new_data["sectionId"] = item.sectionId

                # Update data source
                self.removeDataByName(text, self.source_items)
                self.target_items.append(new_data)


        elif sender == self.removeButton:
            selected_indexes = self.rightListView.selectedIndexes()
            for index in selected_indexes:
                row = index.row()
                item = self.target_model.item(row)
                text = item.text()
                id = item.id
                self.target_model.removeRow(row)
                step_item = StepItem(id, text,item.imageSrc,item.sectionId)
                # step_item.setData(item.text(), Qt.DisplayRole)  # 设置text为显示角色的数据
                self.source_model.appendRow(step_item)
                # new_data = {}
                # new_data["id"] = id
                # new_data["name"] = text
                # new_data["sectionId"] = item.sectionId
                self.removeDataByName(text, self.target_items)

        else:
            return
        self.leftListView.clearSelection()
        self.rightListView.clearSelection()

    def removeDataByName(self,name, new_data):
        if len(new_data)>0:
            new_data[:] = [item for item in new_data if item['name'] != name]

    # 增加关联step
    def add_relation_step(self):
        if self.flag == 1:
            if self.target_items:
                for item in self.target_items:
                    data={}
                    data["stepId"]=self.step_id
                    data["relationStepId"]=item["id"]
                    data["relationStepName"]=item["name"]
                    HttpTool.post(PathConstant.ADD_RELATION_STEP, data)
        else:
            if self.target_items:
                for item in self.target_items:
                    rel_step = {}
                    rel_section = {}
                    rel_step["questionId"] = self.step_id
                    rel_section["questionId"] = self.step_id
                    rel_step["stepId"] = item["id"]
                    rel_section["sectionId"] = item["sectionId"]
                    HttpTool.post(PathConstant.ADD_REL_STEP, rel_step)
                    HttpTool.post(PathConstant.ADD_REL_SECTION, rel_section)
        self.accept()